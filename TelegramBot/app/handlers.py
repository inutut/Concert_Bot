from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

import keyboards as kb
from aux_functions import checkCityInSet
from constants import *
from db_editor import *
from music_parser import process_playlist

router = Router()


class Info(StatesGroup):
    link = State()
    city = State()
    artist = State()


current_concert_index = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_intro_message(message: Message):
    await message.answer(
        INTRO_MESSAGE_TEXT,
        reply_markup=kb.intro_keyboard
    )


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã", parse_mode="HTML")
    is_user_registered(message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await send_intro_message(message)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
@router.message(Info.link)
async def add_first_link(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')

    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"{ERROR_DELETING_PLAYLIST_REQUEST_MESSAGE} {e}")

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETING_USER_PLAYLIST_MESSAGE} {e}")

    if message.text.startswith("https://music.yandex."):
        await state.update_data(link=message.text)
        await state.set_state(Info.city)

        prompt_message = await message.answer(ENTER_CITY_PROMPT)
        await state.update_data(prompt_message_id=prompt_message.message_id)
    else:
        await message.answer(INVALID_PLAYLIST_LINK)


# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
@router.message(Info.city)
async def add_first_city(message: Message, state: FSMContext) -> None:
    global current_concert_index

    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"{ERROR_DELETE_CITY_REQUEST} {e}")

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_USER_MESSAGE} {e}")

    waiting_message = await message.answer(WAIT_CONCERT_SEARCH)
    playlist_link = data.get('link')
    await state.update_data(city=message.text)
    user_telegram_id = message.from_user.id
    new_upload_id = get_last_upload_id_by_user_telegram_id(user_telegram_id) + 1
    process_playlist(playlist_link, message.text, user_telegram_id, new_upload_id)
    concerts = get_concerts_by_user_telegram_id(user_telegram_id, new_upload_id)
    await state.update_data(concerts=concerts)

    try:
        await waiting_message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_WAIT_MESSAGE} {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
    if not checkCityInSet(message.text):
        await message.answer(INVALID_CITY)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        prompt_message = await message.answer(ENTER_CITY_PROMPT)
        await state.update_data(prompt_message_id=prompt_message.message_id)
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
    concerts_message = await message.answer(FAVORITE_ARTISTS_CONCERTS)
    await state.update_data(concerts_message_id=concerts_message.message_id)

    current_concert_index = 0
    await send_concert(message, concerts, current_concert_index)


# –ü—Ä–∏—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã
async def send_concert(message: Message, concerts, index: int):
    concert = concerts[index]
    concertTitle = concert['concert_title']
    formattedDate = concert['datetime']
    place = concert['place']
    address = concert['address']
    afishaUrl = concert['afisha_url']

    total_concerts = len(concerts)
    counter_text = f"<b>{index + 1} –∏–∑ {total_concerts}</b>\n\n"

    messageText = CONCERT_MESSAGE_TEMPLATE.format(
        counter_text=counter_text,
        concert_title=concertTitle,
        formatted_date=formattedDate,
        place=place,
        address=address,
        afisha_url=afishaUrl
    )

    keyboard = kb.concerts_keyboard

    sent_message = await message.answer(messageText, parse_mode="HTML", reply_markup=keyboard)

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_USER_MESSAGE} {e}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"
@router.callback_query(F.data == "add_playlist")
async def add_playlist_button_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    await state.set_state(Info.link)
    try:
        await callback_query.message.edit_text(
            ADD_FIRST_PLAYLIST,
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
        prompt_message = await callback_query.message.answer(
            ADD_FIRST_PLAYLIST,
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
        await state.update_data(prompt_message_id=prompt_message.message_id)
    else:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ message_id
        await state.update_data(prompt_message_id=callback_query.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–æ–±—ã—Ç–∏—è"
@router.callback_query(F.data == "show_my_events")
async def show_my_events_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    concerts = get_all_concerts_by_user_telegram_id(user_id)

    if not concerts:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.", show_alert=True)
        return

    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    await state.update_data(concerts=concerts)
    await state.update_data(concerts_message_id=callback_query.message.message_id)

    global current_concert_index
    current_concert_index = 0
    await send_concert(callback_query.message, concerts, current_concert_index)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_intro")
async def back_to_intro_handler(callback_query: CallbackQuery):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
    try:
        await callback_query.message.edit_text(
            INTRO_MESSAGE_TEXT,
            reply_markup=kb.intro_keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
        await callback_query.message.answer(
            INTRO_MESSAGE_TEXT,
            reply_markup=kb.intro_keyboard,
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ"
@router.callback_query(lambda c: c.data == "next_concert")
async def send_next_concert(callback: CallbackQuery, state: FSMContext):
    global current_concert_index
    data = await state.get_data()
    concerts = data.get('concerts', [])

    if current_concert_index < len(concerts) - 1:
        current_concert_index += 1
        await send_concert(callback.message, concerts, current_concert_index)
    else:
        await callback.answer(LAST_CONCERT_MESSAGE, show_alert=True)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üéâ –í–æ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤:"
        concerts_message_id = data.get('concerts_message_id')
        if concerts_message_id:
            try:
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=concerts_message_id
                )
            except Exception as e:
                print(f"{ERROR_DELETE_PLAYLIST_REQUEST_MESSAGE} {e}")

        current_concert_index = 0
        await state.clear()

        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                INTRO_MESSAGE_TEXT,
                reply_markup=kb.intro_keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                INTRO_MESSAGE_TEXT,
                reply_markup=kb.intro_keyboard,
                parse_mode="HTML"
            )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"
@router.callback_query(F.data == "what_bot_can_do")
async def what_bot_can_do_handler(callback_query: CallbackQuery):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    help_text = HELP_TEXT

    await callback_query.message.edit_text(
        help_text,
        reply_markup=kb.back_keyboard,
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –º–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"
@router.callback_query(F.data == CLEAN_PLAYLIST_CALLBACK)
async def clean_playlist_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    delete_user_concerts_by_user_telegram_id(user_id)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback_query.answer(PLAYLIST_DELETE_SUCCESS, show_alert=True)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
